package server

import (
	"fmt"
	"github.com/gin-gonic/gin"
	ginSwagger "github.com/swaggo/gin-swagger"
	"github.com/swaggo/gin-swagger/swaggerFiles"
	"net/http"
	"time"

	_ "github.com/swaggo/gin-swagger/example/basic/docs" // docs is generated by Swag CLI, you have to import it.

	config "../config"
)

func setupRouter() *gin.Engine {

	router := gin.Default()
	logger(router)

	url := ginSwagger.URL(config.SWAGGER) // The url pointing to API definition
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler, url))

	// GET, POST, PUT, DELETE REST API
	get(router)
	post(router)
	put(router)
	delete(router)

	return router

}

func get(r *gin.Engine) {

	r.GET("/", func(context *gin.Context) {
		context.String(http.StatusOK, "Hello, World")
	})

	r.GET("/ping", func(context *gin.Context) {
		context.String(http.StatusOK, "pong")
	})
}

func post(r *gin.Engine) {

}

func put(r *gin.Engine) {

}

func delete(r *gin.Engine) {

}

func logger(c *gin.Engine) {

	c.Use(gin.LoggerWithFormatter(func(param gin.LogFormatterParams) string {
		return fmt.Sprintf("%s - [%s] \"%s %s %s %d %s \"%s\" %s\"\n",
			param.ClientIP,
			param.TimeStamp.Format(time.RFC1123),
			param.Method,
			param.Path,
			param.Request.Proto,
			param.StatusCode,
			param.Latency,
			param.Request.UserAgent(),
			param.ErrorMessage,
		)
	}))
	c.Use(gin.Recovery())

}
